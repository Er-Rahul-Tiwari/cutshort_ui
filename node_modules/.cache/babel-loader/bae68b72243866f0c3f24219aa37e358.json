{"ast":null,"code":"'use strict'; // TODO: Remove from `core-js@4` since it's moved to entry points\n\nrequire('../modules/es.regexp.exec');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar redefine = require('../internals/redefine');\n\nvar regexpExec = require('../internals/regexp-exec');\n\nvar fails = require('../internals/fails');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\nvar RegExpPrototype = RegExp.prototype;\n\nmodule.exports = function (KEY, exec, FORCED, SHAM) {\n  var SYMBOL = wellKnownSymbol(KEY);\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n\n    O[SYMBOL] = function () {\n      return 7;\n    };\n\n    return ''[KEY](O) != 7;\n  });\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n\n      re.constructor = {};\n\n      re.constructor[SPECIES] = function () {\n        return re;\n      };\n\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () {\n      execCalled = true;\n      return null;\n    };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {\n    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      var uncurriedNativeMethod = uncurryThis(nativeMethod);\n      var $exec = regexp.exec;\n\n      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return {\n            done: true,\n            value: uncurriedNativeRegExpMethod(regexp, str, arg2)\n          };\n        }\n\n        return {\n          done: true,\n          value: uncurriedNativeMethod(str, regexp, arg2)\n        };\n      }\n\n      return {\n        done: false\n      };\n    });\n    redefine(String.prototype, KEY, methods[0]);\n    redefine(RegExpPrototype, SYMBOL, methods[1]);\n  }\n\n  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);\n};","map":{"version":3,"sources":["/Users/rahultiwari/Desktop/cutShort/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"],"names":["require","uncurryThis","redefine","regexpExec","fails","wellKnownSymbol","createNonEnumerableProperty","SPECIES","RegExpPrototype","RegExp","prototype","module","exports","KEY","exec","FORCED","SHAM","SYMBOL","DELEGATES_TO_SYMBOL","O","DELEGATES_TO_EXEC","execCalled","re","constructor","flags","uncurriedNativeRegExpMethod","methods","nativeMethod","regexp","str","arg2","forceStringMethod","uncurriedNativeMethod","$exec","done","value","String"],"mappings":"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","sourcesContent":["'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar redefine = require('../internals/redefine');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\nvar RegExpPrototype = RegExp.prototype;\n\nmodule.exports = function (KEY, exec, FORCED, SHAM) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    FORCED\n  ) {\n    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      var uncurriedNativeMethod = uncurryThis(nativeMethod);\n      var $exec = regexp.exec;\n      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };\n        }\n        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n\n    redefine(String.prototype, KEY, methods[0]);\n    redefine(RegExpPrototype, SYMBOL, methods[1]);\n  }\n\n  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);\n};\n"]},"metadata":{},"sourceType":"script"}