{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar call = require('../internals/function-call');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar isCallable = require('../internals/is-callable');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar toString = require('../internals/to-string');\n\nvar getMethod = require('../internals/get-method');\n\nvar regExpFlags = require('../internals/regexp-flags');\n\nvar getSubstitution = require('../internals/get-substitution');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE = wellKnownSymbol('replace');\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError;\nvar getFlags = uncurryThis(regExpFlags);\nvar indexOf = uncurryThis(''.indexOf);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar max = Math.max;\n\nvar stringIndexOf = function stringIndexOf(string, searchValue, fromIndex) {\n  if (fromIndex > string.length) return -1;\n  if (searchValue === '') return fromIndex;\n  return indexOf(string, searchValue, fromIndex);\n}; // `String.prototype.replaceAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.replaceall\n\n\n$({\n  target: 'String',\n  proto: true\n}, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;\n    var position = 0;\n    var endOfLastMatch = 0;\n    var result = '';\n\n    if (searchValue != null) {\n      IS_REG_EXP = isRegExp(searchValue);\n\n      if (IS_REG_EXP) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype ? searchValue.flags : getFlags(searchValue)));\n        if (!~indexOf(flags, 'g')) throw TypeError('`.replaceAll` does not allow non-global regexes');\n      }\n\n      replacer = getMethod(searchValue, REPLACE);\n\n      if (replacer) {\n        return call(replacer, searchValue, O, replaceValue);\n      } else if (IS_PURE && IS_REG_EXP) {\n        return replace(toString(O), searchValue, replaceValue);\n      }\n    }\n\n    string = toString(O);\n    searchString = toString(searchValue);\n    functionalReplace = isCallable(replaceValue);\n    if (!functionalReplace) replaceValue = toString(replaceValue);\n    searchLength = searchString.length;\n    advanceBy = max(1, searchLength);\n    position = stringIndexOf(string, searchString, 0);\n\n    while (position !== -1) {\n      replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);\n      result += stringSlice(string, endOfLastMatch, position) + replacement;\n      endOfLastMatch = position + searchLength;\n      position = stringIndexOf(string, searchString, position + advanceBy);\n    }\n\n    if (endOfLastMatch < string.length) {\n      result += stringSlice(string, endOfLastMatch);\n    }\n\n    return result;\n  }\n});","map":{"version":3,"sources":["/Users/rahultiwari/Desktop/cutShort/node_modules/core-js/modules/es.string.replace-all.js"],"names":["$","require","global","call","uncurryThis","requireObjectCoercible","isCallable","isRegExp","toString","getMethod","regExpFlags","getSubstitution","wellKnownSymbol","IS_PURE","REPLACE","RegExpPrototype","RegExp","prototype","TypeError","getFlags","indexOf","replace","stringSlice","slice","max","Math","stringIndexOf","string","searchValue","fromIndex","length","target","proto","replaceAll","replaceValue","O","IS_REG_EXP","flags","replacer","searchString","functionalReplace","searchLength","advanceBy","replacement","position","endOfLastMatch","result","undefined"],"mappings":"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","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar isCallable = require('../internals/is-callable');\nvar isRegExp = require('../internals/is-regexp');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar regExpFlags = require('../internals/regexp-flags');\nvar getSubstitution = require('../internals/get-substitution');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE = wellKnownSymbol('replace');\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError;\nvar getFlags = uncurryThis(regExpFlags);\nvar indexOf = uncurryThis(''.indexOf);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar max = Math.max;\n\nvar stringIndexOf = function (string, searchValue, fromIndex) {\n  if (fromIndex > string.length) return -1;\n  if (searchValue === '') return fromIndex;\n  return indexOf(string, searchValue, fromIndex);\n};\n\n// `String.prototype.replaceAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.replaceall\n$({ target: 'String', proto: true }, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;\n    var position = 0;\n    var endOfLastMatch = 0;\n    var result = '';\n    if (searchValue != null) {\n      IS_REG_EXP = isRegExp(searchValue);\n      if (IS_REG_EXP) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype\n          ? searchValue.flags\n          : getFlags(searchValue)\n        ));\n        if (!~indexOf(flags, 'g')) throw TypeError('`.replaceAll` does not allow non-global regexes');\n      }\n      replacer = getMethod(searchValue, REPLACE);\n      if (replacer) {\n        return call(replacer, searchValue, O, replaceValue);\n      } else if (IS_PURE && IS_REG_EXP) {\n        return replace(toString(O), searchValue, replaceValue);\n      }\n    }\n    string = toString(O);\n    searchString = toString(searchValue);\n    functionalReplace = isCallable(replaceValue);\n    if (!functionalReplace) replaceValue = toString(replaceValue);\n    searchLength = searchString.length;\n    advanceBy = max(1, searchLength);\n    position = stringIndexOf(string, searchString, 0);\n    while (position !== -1) {\n      replacement = functionalReplace\n        ? toString(replaceValue(searchString, position, string))\n        : getSubstitution(searchString, string, position, [], undefined, replaceValue);\n      result += stringSlice(string, endOfLastMatch, position) + replacement;\n      endOfLastMatch = position + searchLength;\n      position = stringIndexOf(string, searchString, position + advanceBy);\n    }\n    if (endOfLastMatch < string.length) {\n      result += stringSlice(string, endOfLastMatch);\n    }\n    return result;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}